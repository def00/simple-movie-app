{"version":3,"sources":["../../../src/test/unit/movies-repository.spec.js"],"names":["describe","repository","MoviesRepository","Movie","queryMockService","insert","where","it","mock","sinon","queryMock","expects","returns","once","create","verify","restore","listAll","existsInDb"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,+BAAD;AAAA;AAAA;AAAA;AAAA,wBAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCC,UAAAA,UADkC,GACrB,IAAIC,4BAAJ,CAAqBC,iBAArB,CADqB;AAElCC,UAAAA,gBAFkC,GAEf;AACjBC,YAAAA,MADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEjBC,YAAAA,KAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAFe;AAOxCC,UAAAA,EAAE,CAAC,6BAAD;AAAA;AAAA;AAAA;AAAA,kCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,oBAAAA,IAD0B,GACnBC,kBAAMD,IAAN,CAAWL,iBAAX,CADmB;AAE1BO,oBAAAA,SAF0B,GAEdD,kBAAMD,IAAN,CAAWJ,gBAAX,CAFc;AAIhCI,oBAAAA,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsBC,OAAtB,CAA8BR,gBAA9B,EAAgDS,IAAhD;AACAH,oBAAAA,SAAS,CAACC,OAAV,CAAkB,QAAlB,EAA4BE,IAA5B;AALgC;AAAA,2BAM1BZ,UAAU,CAACa,MAAX,EAN0B;;AAAA;AAOhCN,oBAAAA,IAAI,CAACO,MAAL;AACAP,oBAAAA,IAAI,CAACQ,OAAL;AACAN,oBAAAA,SAAS,CAACM,OAAV;;AATgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAhC,GAAF;AAYAT,UAAAA,EAAE,CAAC,8BAAD;AAAA;AAAA;AAAA;AAAA,kCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,oBAAAA,IAD2B,GACpBC,kBAAMD,IAAN,CAAWL,iBAAX,CADoB;AAGjCK,oBAAAA,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsBC,OAAtB,CAA8BR,gBAA9B,EAAgDS,IAAhD;AAHiC;AAAA,2BAI3BZ,UAAU,CAACgB,OAAX,EAJ2B;;AAAA;AAKjCT,oBAAAA,IAAI,CAACO,MAAL;AACAP,oBAAAA,IAAI,CAACQ,OAAL;;AANiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAjC,GAAF;AASAT,UAAAA,EAAE,CAAC,iCAAD;AAAA;AAAA;AAAA;AAAA,kCAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BC,oBAAAA,IAD8B,GACvBC,kBAAMD,IAAN,CAAWL,iBAAX,CADuB;AAE9BO,oBAAAA,SAF8B,GAElBD,kBAAMD,IAAN,CAAWJ,gBAAX,CAFkB;AAGpCI,oBAAAA,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsBC,OAAtB,CAA8BR,gBAA9B,EAAgDS,IAAhD;AACAH,oBAAAA,SAAS,CAACC,OAAV,CAAkB,OAAlB,EAA2BE,IAA3B;AAJoC;AAAA,2BAK9BZ,UAAU,CAACiB,UAAX,CAAsB,IAAtB,CAL8B;;AAAA;AAMpCV,oBAAAA,IAAI,CAACO,MAAL;AACAP,oBAAAA,IAAI,CAACQ,OAAL;;AAPoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApC,GAAF;;AA5BwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC,GAAR","sourcesContent":["import sinon from 'sinon'\nimport MoviesRepository from '../../repositories/movies-repository'\nimport Movie from '../../models/movie'\n\ndescribe('Should check MoviesRepository', async () => {\n  const repository = new MoviesRepository(Movie)\n  const queryMockService = {\n    async insert() {},\n    async where() {}\n  }\n\n  it('check calling create method', async () => {\n    const mock = sinon.mock(Movie)\n    const queryMock = sinon.mock(queryMockService)\n\n    mock.expects(\"query\").returns(queryMockService).once()\n    queryMock.expects(\"insert\").once()\n    await repository.create()\n    mock.verify();\n    mock.restore()\n    queryMock.restore()\n  })\n\n  it('check calling listAll method', async () => {\n    const mock = sinon.mock(Movie)\n\n    mock.expects(\"query\").returns(queryMockService).once()\n    await repository.listAll()\n    mock.verify();\n    mock.restore()\n  })\n\n  it('check calling existsInDb method', async () => {\n    const mock = sinon.mock(Movie)\n    const queryMock = sinon.mock(queryMockService)\n    mock.expects(\"query\").returns(queryMockService).once()\n    queryMock.expects(\"where\").once()\n    await repository.existsInDb(null)\n    mock.verify();\n    mock.restore()\n  })\n})\n"],"file":"movies-repository.spec.js"}