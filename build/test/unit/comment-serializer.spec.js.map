{"version":3,"sources":["../../../src/test/unit/comment-serializer.spec.js"],"names":["chai","use","chaiAsPromised","describe","comment","commentData","it","wrongInput","expect","to","be","rejectedWith","Error","data","id","eq","author","name","an","email"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,iBAAKC,GAAL,CAASC,0BAAT;;AAEAC,QAAQ,CAAC,+BAAD;AAAA;AAAA;AAAA;AAAA,wBAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCC,UAAAA,OADkC,GACxB,+BAAcC,mBAAd,CADwB;AAGxCC,UAAAA,EAAE,CAAC,mDAAD;AAAA;AAAA;AAAA;AAAA,kCAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAChDC,oBAAAA,UADgD,GACnC,EADmC;AAAA;AAAA,2BAEhDP,iBAAKQ,MAAL,CAAY,mCAAkBD,UAAlB,CAAZ,EAA2CE,EAA3C,CAA8CC,EAA9C,CAAiDC,YAAjD,CAA8DC,KAA9D,CAFgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtD,GAAF;AAKAN,UAAAA,EAAE,CAAC,sDAAD;AAAA;AAAA;AAAA;AAAA,kCAAyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACtC,mCAAkBF,OAAlB,CADsC;;AAAA;AACnDS,oBAAAA,IADmD;;AAEzDb,qCAAKQ,MAAL,CAAYK,IAAI,CAACC,EAAjB,EAAqBL,EAArB,CAAwBC,EAAxB,CAA2BK,EAA3B,CAA8BV,oBAAYS,EAA1C;;AACAd,qCAAKQ,MAAL,CAAYK,IAAI,CAACG,MAAjB,EAAyBP,EAAzB,CAA4BC,EAA5B,CAA+BK,EAA/B,CAAkCV,oBAAYY,IAA9C;;AACAjB,qCAAKQ,MAAL,CAAYK,IAAI,CAACT,OAAjB,EAA0BK,EAA1B,CAA6BC,EAA7B,CAAgCK,EAAhC,CAAmCV,oBAAYD,OAA/C;;AACAJ,qCAAKQ,MAAL,CAAYK,IAAI,CAACI,IAAjB,EAAuBR,EAAvB,CAA0BC,EAA1B,CAA6BQ,EAA7B,CAAgC,WAAhC;;AACAlB,qCAAKQ,MAAL,CAAYK,IAAI,CAACM,KAAjB,EAAwBV,EAAxB,CAA2BC,EAA3B,CAA8BQ,EAA9B,CAAiC,WAAjC;;AANyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAzD,GAAF;AASAZ,UAAAA,EAAE,CAAC,wEAAD;AAAA;AAAA;AAAA;AAAA,kCAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACxD,mCAAkBF,OAAlB,EAA2B,KAA3B,CADwD;;AAAA;AACrES,oBAAAA,IADqE;;AAE3Eb,qCAAKQ,MAAL,CAAYK,IAAI,CAACG,MAAjB,EAAyBP,EAAzB,CAA4BC,EAA5B,CAA+BK,EAA/B,CAAkCV,oBAAYY,IAA9C;;AACAjB,qCAAKQ,MAAL,CAAYK,IAAI,CAACT,OAAjB,EAA0BK,EAA1B,CAA6BC,EAA7B,CAAgCK,EAAhC,CAAmCV,oBAAYD,OAA/C;;AACAJ,qCAAKQ,MAAL,CAAYK,IAAI,CAACI,IAAjB,EAAuBR,EAAvB,CAA0BC,EAA1B,CAA6BQ,EAA7B,CAAgC,WAAhC;;AACAlB,qCAAKQ,MAAL,CAAYK,IAAI,CAACM,KAAjB,EAAwBV,EAAxB,CAA2BC,EAA3B,CAA8BQ,EAA9B,CAAiC,WAAjC;;AACAlB,qCAAKQ,MAAL,CAAYK,IAAI,CAACC,EAAjB,EAAqBL,EAArB,CAAwBC,EAAxB,CAA2BQ,EAA3B,CAA8B,WAA9B;;AAN2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA3E,GAAF;;AAjBwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC,GAAR","sourcesContent":["import commentSerializer from '../../services/serializers/comment-serializer'\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised'\nimport createComment from './data-providers/create-comment'\nimport commentData from './data-providers/comment'\n\nchai.use(chaiAsPromised)\n\ndescribe('Should test commentSerailizer', async () => {\n  const comment = createComment(commentData)\n\n  it('check throwing error when from arguments provided', async () => {\n    const wrongInput = {}\n    await chai.expect(commentSerializer(wrongInput)).to.be.rejectedWith(Error)\n  })\n\n  it('check returning value when proper arguments provided', async () => {\n    const data = await commentSerializer(comment)\n    chai.expect(data.id).to.be.eq(commentData.id)\n    chai.expect(data.author).to.be.eq(commentData.name)\n    chai.expect(data.comment).to.be.eq(commentData.comment)\n    chai.expect(data.name).to.be.an('undefined')\n    chai.expect(data.email).to.be.an('undefined')\n  })\n\n  it('check returning value when proper arguments provided with deep = false', async () => {\n    const data = await commentSerializer(comment, false)\n    chai.expect(data.author).to.be.eq(commentData.name)\n    chai.expect(data.comment).to.be.eq(commentData.comment)\n    chai.expect(data.name).to.be.an('undefined')\n    chai.expect(data.email).to.be.an('undefined')\n    chai.expect(data.id).to.be.an('undefined')\n  })\n})\n"],"file":"comment-serializer.spec.js"}