{"version":3,"sources":["../../src/routes/movies.js"],"names":["router","express","Router","movieRepository","MoviesRepository","Movie","movieFactory","MovieFactory","get","req","res","serializer","listAll","movieSerializer","json","status","post","MoviesSearch","request","search","body","query","movieData","create","send","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AACA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AACA,IAAMC,eAAe,GAAG,IAAIC,4BAAJ,CAAqBC,iBAArB,CAAxB;AACA,IAAMC,YAAY,GAAG,IAAIC,wBAAJ,CAAiBJ,eAAjB,CAArB;AAEA;;AACAH,MAAM,CAACQ,GAAP,CAAW,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAELA,GAFK;AAAA,0BAEUC,sBAFV;AAAA;AAAA,mBAE2BR,eAAe,CAACS,OAAhB,EAF3B;;AAAA;AAAA;AAAA,0BAEsDC,2BAFtD;AAAA;AAAA;;AAAA;AAAA;AAAA,yDAEDC,IAFC;;AAAA;AAAA;AAAA;AAAA,6CAILJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,aAJK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;AAQA;;AACAd,MAAM,CAACgB,IAAP,CAAY,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiB,kBAAOP,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEW,IAAIO,wBAAJ,CAAiBC,gCAAjB,EAA0BC,MAA1B,CAAiCV,GAAG,CAACW,IAAJ,CAASC,KAA1C,CAFX;;AAAA;AAEPC,YAAAA,SAFO;;AAAA,iBAGTA,SAHS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIDhB,YAAY,CAACiB,MAAb,CAAoBD,SAApB,CAJC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAKFZ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,EALE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CASNd,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,aAAMW,KAA3B,CATM;;AAAA;AAAA,8CAYRf,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,gCAArB,CAZQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;eAeed,M","sourcesContent":["import express from 'express'\nimport request from 'request-promise-native'\nimport Movie from '../models/movie'\nimport MoviesSearch from '../services/movies-search'\nimport MovieFactory from '../services/movie-factory'\nimport movieSerializer from '../services/serializers/movie-serializer'\nimport serializer from '../services/serializers/serializer'\nimport MoviesRepository from '../repositories/movies-repository'\nconst router = express.Router()\nconst movieRepository = new MoviesRepository(Movie)\nconst movieFactory = new MovieFactory(movieRepository)\n\n/* GET movies listing. */\nrouter.get('/', async (req, res) => {\n  try {\n    return res.json(await serializer(await movieRepository.listAll(), movieSerializer))\n  } catch (error) {\n    return res.status(500).json(error)\n  }\n})\n\n/* POST search for movies */\nrouter.post('/', async (req, res) => {\n  try {\n    const movieData = await new MoviesSearch(request).search(req.body.query)\n    if (movieData) {\n      if (await movieFactory.create(movieData)) {\n        return res.status(201).send()\n      }\n    }\n  } catch (error) {\n    return res.status(500).json(error.error)\n  }\n  // the movie already exists in db\n  return res.status(409).json('The movie is already in our db')\n})\n\nexport default router\n"],"file":"movies.js"}