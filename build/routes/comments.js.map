{"version":3,"sources":["../../src/routes/comments.js"],"names":["router","express","Router","commentRepository","CommentsRepository","Comment","get","req","res","serializer","listAll","commentSerializer","json","status","post","validation","requestValidator","create","body","author","email","comment","movie_id","send"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AACA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AACA,IAAMC,iBAAiB,GAAG,IAAIC,8BAAJ,CAAuBC,mBAAvB,CAA1B;AAEA;;AACAL,MAAM,CAACM,GAAP,CAAW,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAELA,GAFK;AAAA,0BAEUC,sBAFV;AAAA;AAAA,mBAE2BN,iBAAiB,CAACO,OAAlB,EAF3B;;AAAA;AAAA;AAAA,0BAEwDC,6BAFxD;AAAA;AAAA;;AAAA;AAAA;AAAA,yDAEDC,IAFC;;AAAA;AAAA;AAAA;AAAA,6CAILJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,aAJK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;AAQA;;AACAZ,MAAM,CAACc,IAAP,CAAY,GAAZ,EAAiBC,oBAAjB,EAA6BC,4BAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA+C,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAErCL,iBAAiB,CAACc,MAAlB,CAAyBV,GAAG,CAACW,IAAJ,CAASC,MAAlC,EAA0CZ,GAAG,CAACW,IAAJ,CAASE,KAAnD,EAA0Db,GAAG,CAACW,IAAJ,CAASG,OAAnE,EAA4Ed,GAAG,CAACW,IAAJ,CAASI,QAArF,CAFqC;;AAAA;AAAA,8CAGpCd,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,EAHoC;;AAAA;AAAA;AAAA;AAAA,8CAKpCf,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,cALoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/C;;AAAA;AAAA;AAAA;AAAA;eASeZ,M","sourcesContent":["import express from 'express'\nimport Comment from '../models/comment'\nimport commentSerializer from '../services/serializers/comment-serializer'\nimport validation from '../validation/comment'\nimport serializer from '../services/serializers/serializer'\nimport requestValidator from '../middleware/request-validator'\nimport CommentsRepository from '../repositories/comments-repository'\nconst router = express.Router()\nconst commentRepository = new CommentsRepository(Comment)\n\n/* GET comments listing. */\nrouter.get('/', async (req, res) => {\n  try {\n    return res.json(await serializer(await commentRepository.listAll(), commentSerializer))\n  } catch (error) {\n    return res.status(500).json(error)\n  }\n})\n\n/* POST comment */\nrouter.post('/', validation, requestValidator, async (req, res) => {\n  try {\n    await commentRepository.create(req.body.author, req.body.email, req.body.comment, req.body.movie_id)\n    return res.status(201).send()\n  } catch (error) {\n    return res.status(500).json(error)\n  }\n})\n\nexport default router\n"],"file":"comments.js"}